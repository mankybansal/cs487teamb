//////////////////////////////////////////////////
/////////////// Building Schedules ///////////////
//////////////////////////////////////////////////

schedules = [] // list of all possible schedules

// find all class lists for credits required
// only schedules with no time conflicts
// classes: list of all classes chosen
build_schedules(classes):
    for i in range(0, classes.length):
        for schedule in classes.combinations(i):
            if total_credits(schedule) == credits_required:
                if time_conflicts(schedule) == False:
                    schedules.add(schedule)

////// HELPER FUNCTIONS FOR build_schedules //////

// calculates total credits for a schedule
total_credits(schedule):
    credits = 0
    for class in schedule:
        credits += class.credits
    return credits

// finds time conflicts for a schedule
time_conflicts(schedule):
    classes_slots = []
    for class in schedule:
        classes_slots.add(class.times)
    for classes sorted by start date/time in classes_slots:
        current_end_time = current.class.end_time
        next_start_time = next.class.start_time
        if current_end_time > next_start_time:
            return True
    return False

//////////////////////////////////////////////////
//////////// Find Optimized Schedules ////////////
//////////////////////////////////////////////////

// find schedule with highest optimization score
// only schedules that have no time conflicts and meets total credits required
// schedules: list of all possible schedules
// options: contains the list of classes seperated by required/optional orded by importance and
                list of selected options ordered by importance
get_optimized_schedules(schedules, optimizations):
    scored_schedules = [] // stored as (score, schedule)
    for schedule in schedules:
        score = 0
        for every schedule.classes in optimizations.required:
            score += optimizations.required.level
        for every schedule.classes in optimizations.optional:
            score += optimizations.optional.level
        for option in optimizations.options:
            score += switch(option.type):
                case early_classes: check_early_classes(schedule) * option.level
                case evening_classes: check_evening_classes(schedule) * option.level
                case online_classes: check_online_classes(schedule) * option.level
                case professor_score: check_professor_score(schedule) * option.level
                case professor_difficulty: check_professor_difficulty(schedule) * option.level
                case least_gaps: check_least_gaps(schedule) * option.level
                case least_classes_per_week: check_least_classes_per_week(schedule) * option.level
                case default: 0
        scored_schedules.add(score, schedule)
    return scored_schedules sorted by score

// HELPER FUNCTIONS FOR get_optimized_schedules //

// counts how many classes are considered morning classes (start no later than 1:50pm)
// returns average as a value 0-1
check_early_classes(schedule):
    early_classes = 0
    for every schedule.class.start_time <= 1:50pm:
        early_classes += 1
    return early_classes / schedule.length

// counts how many classes are considered evening classes (start no earlier than 5:15pm)
// returns average as a value 0-1
check_evening_classes(schedule):
    evening_classes = 0
    for every schedule.class.start_time >= 5:15pm:
        evening_classes += 1
    return evening_classes / schedule.length

// counts how many classes have online sections
// returns average as a value 0-1
check_online_classes(schedule):
    online_classes = 0
    for every schedule.class.has_online:
        online_classes += 1
    return online_classes / schedule.length

// gets the total score of all professors through Rate My Professor
// returns average as a value 0-1
check_professor_score(schedule):
    total_score = 0
    for every schedule.class:
        total_score +=  RateMyProfessor(schedule.class.professor).score // referencing Rate My Professor interface
    return total_score / (schedule.length * 5) // score out of 5

// gets the total difficulty of all professors through Rate My Professor
// returns average as a value 0-1
check_professor_difficulty(schedule):
    total_difficulty = 0
    for every schedule.class:
        total_difficulty +=  RateMyProfessor(schedule.class.professor).score
    return 1 - (total_difficulty / (schedule.length * 5)) // difficulty score out of 5

// counts number of gaps between classes
// returns average as a value 0-1
check_least_gaps(schedule):
    gaps = 0
    for every schedule.class sorted by start date/time:
        if (current.schedule.class.end_time + 10 min) != next.schedule.class.start_time:
            gaps += 1
    return 1 - (gaps / schedule.length)

// counts number of days classes are during a week
// returns average as a value 0-1
check_least_classes_per_week(schedule):
    days = Mon:0, Tues:0, Wed:0, Thurs:0, Fri:0, Sat:0
    for every schedule.class:
        days[schedule.class.day] += 1
    return all(days.not_none) / days.length